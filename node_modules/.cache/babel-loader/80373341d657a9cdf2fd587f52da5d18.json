{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/Trybe/Projetos/Projeto 11 - Trybe Tunes/sd-018-b-project-trybetunes/src/pages/Album.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport MusicCard from '../components/MusicCard';\nimport getMusics from '../services/musicsAPI';\nimport { addSong, getFavoriteSongs, removeSong } from '../services/favoriteSongsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst carregando = 'Carregando...';\n\nclass Album extends Component {\n  constructor() {\n    super();\n\n    this.changeLoadingState = async (target, ApiObject) => {\n      this.targetChecked = target.checked;\n\n      if (this.targetChecked === true) {\n        this.inputTarget.push(target.id);\n        this.setState({\n          loading: carregando\n        });\n        await addSong(ApiObject);\n        this.favoritesArray = await getFavoriteSongs();\n        this.setState({\n          loading: ''\n        });\n      }\n\n      if (this.targetChecked === false) {\n        this.inputTarget = this.inputTarget.filter(item => item !== target.id);\n        this.setState({\n          loading: carregando\n        });\n        await removeSong(ApiObject);\n        this.favoritesArray = await getFavoriteSongs();\n        this.setState({\n          loading: ''\n        });\n      }\n    };\n\n    this.showArtist = () => {\n      const {\n        ApiResult\n      } = this.state;\n\n      if (ApiResult.length > 0) {\n        this.artist = ApiResult[0].artistName;\n        this.album = ApiResult[0].albumName;\n      }\n\n      return this.artist;\n    };\n\n    this.showAlbum = () => {\n      const {\n        ApiResult\n      } = this.state;\n\n      if (ApiResult.length > 0) {\n        this.album = ApiResult[0].collectionName;\n      }\n\n      return this.album;\n    };\n\n    this.changeShowContent = () => {\n      this.setState({\n        showContent: true\n      });\n    };\n\n    this.verifyngFavorites = trackName => {\n      const result = this.favoritesArray.some(item => item.trackName === trackName);\n      return result;\n    };\n\n    this.inputTargetChecked = trackName => {\n      const result = this.inputTarget.some(item => item === trackName);\n      return result;\n    };\n\n    this.showMusics = () => {\n      const {\n        ApiResult,\n        showContent,\n        loading\n      } = this.state;\n\n      if (loading === '') {\n        if (showContent) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            \"data-testid\": \"page-album\",\n            children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              \"data-testid\": \"artist-name\",\n              children: this.showArtist()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              \"data-testid\": \"album-name\",\n              children: this.showAlbum()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 13\n            }, this), ApiResult.lenght !== 0 ? ApiResult.map((item, index) => /*#__PURE__*/_jsxDEV(MusicCard, {\n              showContent: this.changeShowContent,\n              ApiObject: item,\n              trackId: item.trackId,\n              trackName: item.trackName,\n              previewUrl: item.previewUrl,\n              loadingState: this.changeLoadingState,\n              checked: this.verifyngFavorites(item.trackName) || this.inputTargetChecked(item.trackName)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this)) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 11\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: carregando\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 11\n          }, this)\n        }, void 0, false);\n      }\n\n      if (loading === carregando) {\n        return /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: carregando\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 14\n        }, this);\n      }\n    };\n\n    this.targetChecked = '';\n    this.inputTarget = [];\n    this.favoritesArray = [];\n    this.artist = '';\n    this.album = '';\n    this.state = {\n      ApiResult: [],\n      showContent: false,\n      loading: ''\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      location\n    } = this.props;\n    const {\n      pathname\n    } = location;\n    const id = pathname.replace(/[^0-9]/g, '');\n    const result = await getMusics(id);\n    this.favoritesArray = await getFavoriteSongs();\n    this.setState({\n      ApiResult: result\n    });\n  }\n\n  render() {\n    return this.showMusics();\n  }\n\n}\n\nAlbum.propTypes = {\n  location: PropTypes.string.isRequired,\n  pathname: PropTypes.string.isRequired\n};\nexport default Album;","map":{"version":3,"sources":["/home/gabriel/Trybe/Projetos/Projeto 11 - Trybe Tunes/sd-018-b-project-trybetunes/src/pages/Album.js"],"names":["React","Component","PropTypes","Header","MusicCard","getMusics","addSong","getFavoriteSongs","removeSong","carregando","Album","constructor","changeLoadingState","target","ApiObject","targetChecked","checked","inputTarget","push","id","setState","loading","favoritesArray","filter","item","showArtist","ApiResult","state","length","artist","artistName","album","albumName","showAlbum","collectionName","changeShowContent","showContent","verifyngFavorites","trackName","result","some","inputTargetChecked","showMusics","lenght","map","index","trackId","previewUrl","componentDidMount","location","props","pathname","replace","render","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport MusicCard from '../components/MusicCard';\nimport getMusics from '../services/musicsAPI';\nimport { addSong, getFavoriteSongs, removeSong } from '../services/favoriteSongsAPI';\n\nconst carregando = 'Carregando...';\n\nclass Album extends Component {\n  constructor() {\n    super();\n    this.targetChecked = '';\n    this.inputTarget = [];\n    this.favoritesArray = [];\n    this.artist = '';\n    this.album = '';\n    this.state = {\n      ApiResult: [],\n      showContent: false,\n      loading: '',\n    };\n  }\n\n  async componentDidMount() {\n    const { location } = this.props;\n    const { pathname } = location;\n    const id = pathname.replace(/[^0-9]/g, '');\n    const result = await getMusics(id);\n    this.favoritesArray = await getFavoriteSongs();\n    this.setState({ ApiResult: result });\n  }\n\n  changeLoadingState = async (target, ApiObject) => {\n    this.targetChecked = target.checked;\n    if (this.targetChecked === true) {\n      this.inputTarget.push(target.id);\n      this.setState({ loading: carregando });\n      await addSong(ApiObject);\n      this.favoritesArray = await getFavoriteSongs();\n      this.setState({ loading: '' });\n    }\n    if (this.targetChecked === false) {\n      this.inputTarget = this.inputTarget.filter((item) => item !== target.id);\n      this.setState({ loading: carregando });\n      await removeSong(ApiObject);\n      this.favoritesArray = await getFavoriteSongs();\n      this.setState({ loading: '' });\n    }\n  }\n\n  showArtist = () => {\n    const { ApiResult } = this.state;\n    if (ApiResult.length > 0) {\n      this.artist = ApiResult[0].artistName;\n      this.album = ApiResult[0].albumName;\n    }\n    return (\n      this.artist\n    );\n  }\n\n  showAlbum = () => {\n    const { ApiResult } = this.state;\n    if (ApiResult.length > 0) {\n      this.album = ApiResult[0].collectionName;\n    }\n    return (\n      this.album\n    );\n  }\n\n  changeShowContent = () => {\n    this.setState({ showContent: true });\n  }\n\n  verifyngFavorites = (trackName) => {\n    const result = this.favoritesArray.some((item) => item.trackName === trackName);\n    return result;\n  }\n\n  inputTargetChecked = (trackName) => {\n    const result = this.inputTarget.some((item) => item === trackName);\n    return result;\n  }\n\n  showMusics = () => {\n    const { ApiResult, showContent, loading } = this.state;\n    if (loading === '') {\n      if (showContent) {\n        return (\n          <div data-testid=\"page-album\">\n            <Header />\n            <h2 data-testid=\"artist-name\">{this.showArtist()}</h2>\n            <h3 data-testid=\"album-name\">{this.showAlbum()}</h3>\n            {ApiResult.lenght !== 0\n              ? ApiResult.map((item, index) => (\n                <MusicCard\n                  showContent={ this.changeShowContent }\n                  ApiObject={ item }\n                  trackId={ item.trackId }\n                  key={ index }\n                  trackName={ item.trackName }\n                  previewUrl={ item.previewUrl }\n                  loadingState={ this.changeLoadingState }\n                  checked={\n                    (this.verifyngFavorites(item.trackName)\n                    || this.inputTargetChecked(item.trackName))\n                  }\n                />)) : null }\n          </div>\n        );\n      }\n      return (\n        <>\n          <h2>{ carregando }</h2>\n          {/* <MusicCard\n            showContent={ this.changeShowContent }\n            ApiObject=\"\"\n            trackId=\"\"\n            key=\"\"\n            trackName=\"\"\n            previewUrl=\"\"\n            checkedState={ this.changeLoadingState }\n            checked={ false }\n          /> */}\n        </>\n\n      );\n    } if (loading === carregando) {\n      return <h2>{ carregando }</h2>;\n    }\n  }\n\n  render() {\n    return this.showMusics();\n  }\n}\n\nAlbum.propTypes = {\n  location: PropTypes.string.isRequired,\n  pathname: PropTypes.string.isRequired,\n};\n\nexport default Album;\n"]},"metadata":{},"sourceType":"module"}