{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/Trybe/Projetos/Projeto 11 - Trybe Tunes/sd-018-b-project-trybetunes/src/pages/Album.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport MusicCard from '../components/MusicCard';\nimport getMusics from '../services/musicsAPI';\nimport { addSong, getFavoriteSongs, removeSong } from '../services/favoriteSongsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst carregando = 'Carregando...';\n\nclass Album extends Component {\n  constructor() {\n    super();\n\n    this.changeLoadingState = async (trackName, target) => {\n      this.targetChecked = target.checked;\n      console.log(this.targetChecked, trackName);\n\n      if (this.targetChecked === true) {\n        this.inputTarget.push(target.id);\n        this.setState({\n          loading: carregando\n        });\n        await addSong(trackName);\n        this.setState({\n          loading: ''\n        });\n      }\n\n      console.log(this.targetChecked, trackName);\n\n      if (this.targetChecked === false) {\n        await removeSong(trackName);\n        this.inputTarget.unshift(target.id);\n      }\n    };\n\n    this.showArtist = () => {\n      const {\n        ApiResult\n      } = this.state;\n\n      if (ApiResult.length > 0) {\n        this.artist = ApiResult[0].artistName;\n        this.album = ApiResult[0].albumName;\n      }\n\n      return this.artist;\n    };\n\n    this.showAlbum = () => {\n      const {\n        ApiResult\n      } = this.state;\n\n      if (ApiResult.length > 0) {\n        this.album = ApiResult[0].collectionName;\n      }\n\n      return this.album;\n    };\n\n    this.changeShowContent = () => {\n      this.setState({\n        showContent: true\n      });\n    };\n\n    this.verifyngFavorites = trackName => {\n      if (this.favoritesArray.includes(trackName)) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.inputTargetChecked = trackName => {\n      console.log(this.inputTarget, trackName);\n      const result = this.inputTarget.some(item => item === trackName);\n      return result;\n    };\n\n    this.showMusics = () => {\n      const {\n        ApiResult,\n        showContent,\n        loading\n      } = this.state;\n\n      if (loading === '') {\n        if (showContent) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            \"data-testid\": \"page-album\",\n            children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              \"data-testid\": \"artist-name\",\n              children: this.showArtist()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              \"data-testid\": \"album-name\",\n              children: this.showAlbum()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 13\n            }, this), ApiResult.lenght !== 0 ? ApiResult.map((item, index) => /*#__PURE__*/_jsxDEV(MusicCard, {\n              showContent: this.changeShowContent,\n              ApiObject: item,\n              trackId: item.trackId,\n              trackName: item.trackName,\n              previewUrl: item.previewUrl,\n              loadingState: this.changeLoadingState,\n              checked: this.verifyngFavorites(item.trackName) || this.inputTargetChecked(item.trackName)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 11\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: carregando\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(MusicCard, {\n            showContent: this.changeShowContent,\n            ApiObject: \"\",\n            trackId: \"\",\n            trackName: \"\",\n            previewUrl: \"\",\n            checkedState: this.changeLoadingState,\n            checked: false\n          }, \"\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true);\n      }\n\n      if (loading === carregando) {\n        return /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: carregando\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 14\n        }, this);\n      }\n    };\n\n    this.targetChecked = '';\n    this.inputTarget = [];\n    this.favoritesArray = [];\n    this.artist = '';\n    this.album = '';\n    this.state = {\n      ApiResult: [],\n      showContent: false,\n      loading: ''\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      location\n    } = this.props;\n    const {\n      pathname\n    } = location;\n    const id = pathname.replace(/[^0-9]/g, '');\n    const result = await getMusics(id);\n    this.favoritesArray = await getFavoriteSongs();\n    this.setState({\n      ApiResult: result\n    });\n  }\n\n  render() {\n    return this.showMusics();\n  }\n\n}\n\nAlbum.propTypes = {\n  location: PropTypes.string.isRequired,\n  pathname: PropTypes.string.isRequired\n};\nexport default Album;","map":{"version":3,"sources":["/home/gabriel/Trybe/Projetos/Projeto 11 - Trybe Tunes/sd-018-b-project-trybetunes/src/pages/Album.js"],"names":["React","Component","PropTypes","Header","MusicCard","getMusics","addSong","getFavoriteSongs","removeSong","carregando","Album","constructor","changeLoadingState","trackName","target","targetChecked","checked","console","log","inputTarget","push","id","setState","loading","unshift","showArtist","ApiResult","state","length","artist","artistName","album","albumName","showAlbum","collectionName","changeShowContent","showContent","verifyngFavorites","favoritesArray","includes","inputTargetChecked","result","some","item","showMusics","lenght","map","index","trackId","previewUrl","componentDidMount","location","props","pathname","replace","render","propTypes","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,SAASC,OAAT,EAAkBC,gBAAlB,EAAoCC,UAApC,QAAsD,8BAAtD;;;AAEA,MAAMC,UAAU,GAAG,eAAnB;;AAEA,MAAMC,KAAN,SAAoBT,SAApB,CAA8B;AAC5BU,EAAAA,WAAW,GAAG;AACZ;;AADY,SAuBdC,kBAvBc,GAuBO,OAAOC,SAAP,EAAkBC,MAAlB,KAA6B;AAChD,WAAKC,aAAL,GAAqBD,MAAM,CAACE,OAA5B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,aAAjB,EAAgCF,SAAhC;;AACA,UAAI,KAAKE,aAAL,KAAuB,IAA3B,EAAiC;AAC/B,aAAKI,WAAL,CAAiBC,IAAjB,CAAsBN,MAAM,CAACO,EAA7B;AACA,aAAKC,QAAL,CAAc;AAAEC,UAAAA,OAAO,EAAEd;AAAX,SAAd;AACA,cAAMH,OAAO,CAACO,SAAD,CAAb;AACA,aAAKS,QAAL,CAAc;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAd;AACD;;AACDN,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,aAAjB,EAAgCF,SAAhC;;AACA,UAAI,KAAKE,aAAL,KAAuB,KAA3B,EAAkC;AAChC,cAAMP,UAAU,CAACK,SAAD,CAAhB;AACA,aAAKM,WAAL,CAAiBK,OAAjB,CAAyBV,MAAM,CAACO,EAAhC;AACD;AACF,KArCa;;AAAA,SAuCdI,UAvCc,GAuCD,MAAM;AACjB,YAAM;AAAEC,QAAAA;AAAF,UAAgB,KAAKC,KAA3B;;AACA,UAAID,SAAS,CAACE,MAAV,GAAmB,CAAvB,EAA0B;AACxB,aAAKC,MAAL,GAAcH,SAAS,CAAC,CAAD,CAAT,CAAaI,UAA3B;AACA,aAAKC,KAAL,GAAaL,SAAS,CAAC,CAAD,CAAT,CAAaM,SAA1B;AACD;;AACD,aACE,KAAKH,MADP;AAGD,KAhDa;;AAAA,SAkDdI,SAlDc,GAkDF,MAAM;AAChB,YAAM;AAAEP,QAAAA;AAAF,UAAgB,KAAKC,KAA3B;;AACA,UAAID,SAAS,CAACE,MAAV,GAAmB,CAAvB,EAA0B;AACxB,aAAKG,KAAL,GAAaL,SAAS,CAAC,CAAD,CAAT,CAAaQ,cAA1B;AACD;;AACD,aACE,KAAKH,KADP;AAGD,KA1Da;;AAAA,SA4DdI,iBA5Dc,GA4DM,MAAM;AACxB,WAAKb,QAAL,CAAc;AAAEc,QAAAA,WAAW,EAAE;AAAf,OAAd;AACD,KA9Da;;AAAA,SAgEdC,iBAhEc,GAgEOxB,SAAD,IAAe;AACjC,UAAI,KAAKyB,cAAL,CAAoBC,QAApB,CAA6B1B,SAA7B,CAAJ,EAA6C;AAC3C,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD,KArEa;;AAAA,SAuEd2B,kBAvEc,GAuEQ3B,SAAD,IAAe;AAClCI,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,WAAjB,EAA8BN,SAA9B;AACA,YAAM4B,MAAM,GAAG,KAAKtB,WAAL,CAAiBuB,IAAjB,CAAuBC,IAAD,IAAUA,IAAI,KAAK9B,SAAzC,CAAf;AACA,aAAO4B,MAAP;AACD,KA3Ea;;AAAA,SA6EdG,UA7Ec,GA6ED,MAAM;AACjB,YAAM;AAAElB,QAAAA,SAAF;AAAaU,QAAAA,WAAb;AAA0Bb,QAAAA;AAA1B,UAAsC,KAAKI,KAAjD;;AACA,UAAIJ,OAAO,KAAK,EAAhB,EAAoB;AAClB,YAAIa,WAAJ,EAAiB;AACf,8BACE;AAAK,2BAAY,YAAjB;AAAA,oCACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAI,6BAAY,aAAhB;AAAA,wBAA+B,KAAKX,UAAL;AAA/B;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAI,6BAAY,YAAhB;AAAA,wBAA8B,KAAKQ,SAAL;AAA9B;AAAA;AAAA;AAAA;AAAA,oBAHF,EAIGP,SAAS,CAACmB,MAAV,KAAqB,CAArB,GACGnB,SAAS,CAACoB,GAAV,CAAc,CAACH,IAAD,EAAOI,KAAP,kBACd,QAAC,SAAD;AACE,cAAA,WAAW,EAAG,KAAKZ,iBADrB;AAEE,cAAA,SAAS,EAAGQ,IAFd;AAGE,cAAA,OAAO,EAAGA,IAAI,CAACK,OAHjB;AAKE,cAAA,SAAS,EAAGL,IAAI,CAAC9B,SALnB;AAME,cAAA,UAAU,EAAG8B,IAAI,CAACM,UANpB;AAOE,cAAA,YAAY,EAAG,KAAKrC,kBAPtB;AAQE,cAAA,OAAO,EACJ,KAAKyB,iBAAL,CAAuBM,IAAI,CAAC9B,SAA5B,KACE,KAAK2B,kBAAL,CAAwBG,IAAI,CAAC9B,SAA7B;AAVP,eAIQkC,KAJR;AAAA;AAAA;AAAA;AAAA,oBADA,CADH,GAcU,IAlBb;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF;AAsBD;;AACD,4BACE;AAAA,kCACE;AAAA,sBAAMtC;AAAN;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,SAAD;AACE,YAAA,WAAW,EAAG,KAAK0B,iBADrB;AAEE,YAAA,SAAS,EAAC,EAFZ;AAGE,YAAA,OAAO,EAAC,EAHV;AAKE,YAAA,SAAS,EAAC,EALZ;AAME,YAAA,UAAU,EAAC,EANb;AAOE,YAAA,YAAY,EAAG,KAAKvB,kBAPtB;AAQE,YAAA,OAAO,EAAG;AARZ,aAIM,EAJN;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA,wBADF;AAgBD;;AAAC,UAAIW,OAAO,KAAKd,UAAhB,EAA4B;AAC5B,4BAAO;AAAA,oBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD;AACF,KA3Ha;;AAEZ,SAAKM,aAAL,GAAqB,EAArB;AACA,SAAKI,WAAL,GAAmB,EAAnB;AACA,SAAKmB,cAAL,GAAsB,EAAtB;AACA,SAAKT,MAAL,GAAc,EAAd;AACA,SAAKE,KAAL,GAAa,EAAb;AACA,SAAKJ,KAAL,GAAa;AACXD,MAAAA,SAAS,EAAE,EADA;AAEXU,MAAAA,WAAW,EAAE,KAFF;AAGXb,MAAAA,OAAO,EAAE;AAHE,KAAb;AAKD;;AAEsB,QAAjB2B,iBAAiB,GAAG;AACxB,UAAM;AAAEC,MAAAA;AAAF,QAAe,KAAKC,KAA1B;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAeF,QAArB;AACA,UAAM9B,EAAE,GAAGgC,QAAQ,CAACC,OAAT,CAAiB,SAAjB,EAA4B,EAA5B,CAAX;AACA,UAAMb,MAAM,GAAG,MAAMpC,SAAS,CAACgB,EAAD,CAA9B;AACA,SAAKiB,cAAL,GAAsB,MAAM/B,gBAAgB,EAA5C;AACA,SAAKe,QAAL,CAAc;AAAEI,MAAAA,SAAS,EAAEe;AAAb,KAAd;AACD;;AAwGDc,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKX,UAAL,EAAP;AACD;;AAhI2B;;AAmI9BlC,KAAK,CAAC8C,SAAN,GAAkB;AAChBL,EAAAA,QAAQ,EAAEjD,SAAS,CAACuD,MAAV,CAAiBC,UADX;AAEhBL,EAAAA,QAAQ,EAAEnD,SAAS,CAACuD,MAAV,CAAiBC;AAFX,CAAlB;AAKA,eAAehD,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport MusicCard from '../components/MusicCard';\nimport getMusics from '../services/musicsAPI';\nimport { addSong, getFavoriteSongs, removeSong } from '../services/favoriteSongsAPI';\n\nconst carregando = 'Carregando...';\n\nclass Album extends Component {\n  constructor() {\n    super();\n    this.targetChecked = '';\n    this.inputTarget = [];\n    this.favoritesArray = [];\n    this.artist = '';\n    this.album = '';\n    this.state = {\n      ApiResult: [],\n      showContent: false,\n      loading: '',\n    };\n  }\n\n  async componentDidMount() {\n    const { location } = this.props;\n    const { pathname } = location;\n    const id = pathname.replace(/[^0-9]/g, '');\n    const result = await getMusics(id);\n    this.favoritesArray = await getFavoriteSongs();\n    this.setState({ ApiResult: result });\n  }\n\n  changeLoadingState = async (trackName, target) => {\n    this.targetChecked = target.checked;\n    console.log(this.targetChecked, trackName);\n    if (this.targetChecked === true) {\n      this.inputTarget.push(target.id);\n      this.setState({ loading: carregando });\n      await addSong(trackName);\n      this.setState({ loading: '' });\n    }\n    console.log(this.targetChecked, trackName);\n    if (this.targetChecked === false) {\n      await removeSong(trackName);\n      this.inputTarget.unshift(target.id);\n    }\n  }\n\n  showArtist = () => {\n    const { ApiResult } = this.state;\n    if (ApiResult.length > 0) {\n      this.artist = ApiResult[0].artistName;\n      this.album = ApiResult[0].albumName;\n    }\n    return (\n      this.artist\n    );\n  }\n\n  showAlbum = () => {\n    const { ApiResult } = this.state;\n    if (ApiResult.length > 0) {\n      this.album = ApiResult[0].collectionName;\n    }\n    return (\n      this.album\n    );\n  }\n\n  changeShowContent = () => {\n    this.setState({ showContent: true });\n  }\n\n  verifyngFavorites = (trackName) => {\n    if (this.favoritesArray.includes(trackName)) {\n      return true;\n    }\n    return false;\n  }\n\n  inputTargetChecked = (trackName) => {\n    console.log(this.inputTarget, trackName);\n    const result = this.inputTarget.some((item) => item === trackName);\n    return result;\n  }\n\n  showMusics = () => {\n    const { ApiResult, showContent, loading } = this.state;\n    if (loading === '') {\n      if (showContent) {\n        return (\n          <div data-testid=\"page-album\">\n            <Header />\n            <h2 data-testid=\"artist-name\">{this.showArtist()}</h2>\n            <h3 data-testid=\"album-name\">{this.showAlbum()}</h3>\n            {ApiResult.lenght !== 0\n              ? ApiResult.map((item, index) => (\n                <MusicCard\n                  showContent={ this.changeShowContent }\n                  ApiObject={ item }\n                  trackId={ item.trackId }\n                  key={ index }\n                  trackName={ item.trackName }\n                  previewUrl={ item.previewUrl }\n                  loadingState={ this.changeLoadingState }\n                  checked={\n                    (this.verifyngFavorites(item.trackName)\n                    || this.inputTargetChecked(item.trackName))\n                  }\n                />)) : null }\n          </div>\n        );\n      }\n      return (\n        <>\n          <h2>{ carregando }</h2>\n          <MusicCard\n            showContent={ this.changeShowContent }\n            ApiObject=\"\"\n            trackId=\"\"\n            key=\"\"\n            trackName=\"\"\n            previewUrl=\"\"\n            checkedState={ this.changeLoadingState }\n            checked={ false }\n          />\n        </>\n\n      );\n    } if (loading === carregando) {\n      return <h2>{ carregando }</h2>;\n    }\n  }\n\n  render() {\n    return this.showMusics();\n  }\n}\n\nAlbum.propTypes = {\n  location: PropTypes.string.isRequired,\n  pathname: PropTypes.string.isRequired,\n};\n\nexport default Album;\n"]},"metadata":{},"sourceType":"module"}